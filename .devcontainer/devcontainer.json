{
	// Forked from https://github.com/matheusfvesco/devcontainer-templates/blob/00c5ed8386244131e73f5ab29f2d595365c25e5f/src/miniforge/.devcontainer/devcontainer.json
	// References: https://github.com/flathub/com.visualstudio.code/issues/55#issuecomment-2561905012

	// For quick reference: https://containers.dev/implementors/json_reference/
	// condaforge/miniforge3 tags: https://hub.docker.com/r/condaforge/miniforge3/tags
	"name": "rblxdevcontainer",
	//"image": "docker.io/condaforge/miniforge3:latest",
	"image": "localhost/stemgame:latest", // use this if you build the image locally
	/*
	"build": {
		"context": "..",
		"dockerfile": "../Dockerfile"
	},*/

	// 1. Use 'forwardPorts' to make a list of ports inside the container available locally.
	"forwardPorts": [34872],

	// 2. Use 'mounts' to make a list of local directories available inside the container. More info: https://code.visualstudio.com/remote/advancedcontainers/add-local-file-mount
	// "mounts": [],

	// 3. Use 'runArgs' to pass arguments to the container. 
	"runArgs": [
		
		// ## Rootless containers with podman
		// If a wrapper script also sets these parameters, they are redundant
		// if settings.json has e.g.: dev.containers.dockerPath="path_to/podman-rootless",
		"--userns=keep-id", "--security-opt=label=disable",

		// ## Logging verbosity
		"--log-level=debug",

		// ## Container Runtimes
		// "--runtime crun",  // podman errors with: "unknown flag"

		// ## Networking
		"--net=host",

		// ## IPC: Interprocess Communication
		// $ man podman-run 2>/dev/null | grep -E '^\s+--ipc=' -A 21
		// > â€¢ host: use the host's shared memory, semaphores, and message queues inside the container. Note: the host mode gives
        // >   the container full access to local shared memory and is therefore considered insecure.
		"--ipc=host",
		// - [ ] TODO: is ipc=host necessary for X11 apps?
		// - [ ] TODO: test less permissive --ipc= parameters for rootless containers 

		// ## GPU support
		// https://github.com/NVIDIA/nvidia-container-toolkit/issues/46#issuecomment-1587350187
		//
		// ### generate nvidia.yaml containing mounts for --gpus containers
		// $ sudo nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml
		// $      nvidia-ctk cdi generate --output=/var/run/cdi/nvidia.yaml
		// $ ls -al /dev/dri/** /dev/nvidia*
		// $ cat /etc/cdi/nvidia.yaml | grep -E -C 5 "deviceNodes:|/dev/dri|/dev/nvidia"
		"--gpus", "all",
		"--device","nvidia.com/gpu=all",
		// This system has an iGPU and a dGPU:  [(card0, renderD129), (card1, renderD128)] 
		// "--device","/dev/dri/card0",
		// "--device","/dev/dri/renderD129",
		"--device","/dev/dri/card1",
		"--device","/dev/dri/renderD128",

		// ## GUI X11 / Wayland app passthrough to host
		// ### DISPLAY for Wayland / X11 gui apps
		"-e DISPLAY",

		// ### /tmp/.X11-unix for Wayland (TODO: ?) / X11 gui apps
		"-v","/tmp/.X11-unix:/tmp/.X11-unix:rw"

		// ### XAUTHORITY
		// #### XAUTHORITY for Wayland / X11 GUI apps
		//"-v","${localEnv:XAUTHORITY}:/root/.Xauthority:ro",
		//"-v","${localEnv:XAUTHORITY}:/home/appuser/.Xauthority:ro",
		//
		// #### XAUTHORITY2 for Wayland / X11 GUI apps
		// With/for flatpak, this requires running vscode with XAUTHORITY2 set
		// because flatpak-run-x11.c sets XAUTHORITY to /var/run/XAuthority uncondtionally
		//"-v","${localEnv:XAUTHORITY2}:/root/.Xauthority:ro",
		//"-v","${localenv:XAUTHORITY2}:/home/appuser/.xauthority:ro"

		// ## Set $HOME (see also: devcontainer.json `remoteUser`, `--userns`)
		//"-e HOME='/home/appuser'",

	],

	// run the container with all GPUs
	//"runArgs": [
	//	"--gpus",
	//	"all"
	//],

	// 4. Features to add to the Dev Container. More info: https://containers.dev/implementors/features
	// https://containers.dev/features
	"features": {
		/*


		// // make
		"ghcr.io/jungaretti/features/make:1": {
			// "version": "1.0.1"
		},


		// // git
		"ghcr.io/devcontainers/features/git:1": {
			"version": "os-provided",
			"ppa": "false"
		},
		// // git-lfs
		"ghcr.io/devcontainers/features/git-lfs:1": {
			// "version": "1.2.3"
		},


		// // conda
		// "ghcr.io/devcontainers/features/conda:1": {
		//	  // "version": "1.0.9"
		// },
		// // micromamba
		// "ghcr.io/mamba-org/devcontainer-features/micromamba:1": {
		//	"channels": "conda-forge",
		//	"packages": ["python=3.12", "pandas", "sympy", "ipykernel", "jupyter_console"],
		//	"envFile": "/etc/environment.yml"
		// },
		// // miniforge
		// "ghcr.io/rocker-org/devcontainer-features/miniforge:2": {
		//	// "version": "2.0.0"
		// },
		// // python
		"ghcr.io/devcontainers/features/python:1": {
			// "version": "1.7.0"
		},
		// // pipx
		"ghcr.io/devcontainers-extra/features/pipx-package:1": {
			// "version": "1.1.9",
		},
		// // pre-commit (pipx)
		"ghcr.io/devcontainers-extra/features/pre-commit:2": {
			// "version": "2.0.17",
		},
		// // pylint
		"ghcr.io/devcontainers-extra/features/pylint:1": {
			// "version": "2.0.17",
		},
		// // ruff (pipx)
		"ghcr.io/devcontainers-extra/features/ruff:1": {
			// "version": "1.0.1",
		},

		// // sqlite
		"ghcr.io/warrenbuckley/codespace-features/sqlite:1": {},
		// // DVC
		// "ghcr.io/iterative/features/dvc:1": {
		//	// "version": "1.0.4"
		// },
		// // github-cli: gh
		"ghcr.io/devcontainers/features/github-cli:1": {
			// 
		},
		//

		// // shell-history -- https://github.com/stuartleeks/dev-container-features/blob/main/src/shell-history/README.md
		// "ghcr.io/stuartleeks/dev-container-features/shell-history:0": {}
		
		// "ghcr.io/jsburckhardt/devcontainer-features/jnv:1": {},
		// "ghcr.io/jsburckhardt/devcontainer-features/uv:1": {},
		// "ghcr.io/jsburckhardt/devcontainer-features/ruff:1": {},

		//
        // "ghcr.io/jsburckhardt/devcontainer-features/cyclonedx:1": {}

		*/
	},

	// 5. Configure tool-specific properties.
	"customizations": {
		// Configure properties specific to VS Code.
		"vscode": {
			// Set *default* container specific settings.json values on container create.
			"settings": {
			},
			// installs useful extensions
			"extensions": [
                "evaera.vscode-rojo",
				"JohnnyMorganz.luau-lsp",
				"JohnnyMorganz.stylua",
				"filiptibell.roblox-ui",
				"ThornHall.roblox-studio-like-syntax-highlighting",
				//"ms-azuretools.vscode-docker",
				"ms-vscode.makefile-tools",
				"tamasfe.even-better-toml",

				"vscodevim.vim",
				"nlehmann.vscode-vim-search-and-replace"
			]
		}
	}
	
	// 6. Set `remoteUser` to `root` to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	//"remoteUser": "root"

	// the following commands are related to container lifecylce. More info: https://containers.dev/implementors/json_reference/#lifecycle-scripts
	
	// 7. Use 'initializeCommand' to run commands ON THE HOST before container is created or started.
	// "initializeCommand": "",

	// 8. Use 'onCreateCommand' to run commands INSIDE THE CONTAINER after it started for the first time.
	// // "onCreateCommand": "mamba install -q -y -c conda-forge python=3.12 ipykernel pandas numpy sympy ipykernel rust lua xeus-lua make jupyterlite && python -m ipykernel install --user --name=python3.12"
	//"onCreateCommand": "vinegar run",
	
	// 9. Use 'updateContentCommand' to run commands if the root filetree have any changes, during container creation.
	// "updateContentCommand": "",

	// 10. Use 'postCreateCommand' to run commands after the container is created.
	// "postCreateCommand": "pip3 install --user -r requirements.txt",

	// 11. Use 'postStartCommand' to run a command each time the container starts successfully.
	// "postStartCommand": "",
	
	// 12. Use 'postAttachCommand' to run a command each time a tool attaches to the container successfully. 
	// "postAttachCommand": "",
}